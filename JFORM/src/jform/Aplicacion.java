/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jform;

import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 *
 * @author Raul
 */
public class Aplicacion extends javax.swing.JFrame {
    private Formulario form = new Formulario();;
    private HashMap<String,Paciente> pacientes;

    /**
     * Creates new form Aplicacion
     */
    public Aplicacion() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        GestionarPacientes = new javax.swing.JMenuItem();
        BorrarPaciente = new javax.swing.JMenuItem();
        PedirCita = new javax.swing.JMenuItem();
        AñadirCita = new javax.swing.JMenuItem();
        ConsultarHistorial = new javax.swing.JMenu();
        MostrarHistorial = new javax.swing.JMenuItem();
        BorrarHistorial = new javax.swing.JMenuItem();
        Salir = new javax.swing.JMenu();
        Exit = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("jMenu3");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestión Pacientes v1.0");

        fileMenu.setMnemonic('G');
        fileMenu.setText("Gestion Pacientes");

        GestionarPacientes.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        GestionarPacientes.setMnemonic('o');
        GestionarPacientes.setText("Añadir Paciente");
        GestionarPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GestionarPacientesActionPerformed(evt);
            }
        });
        fileMenu.add(GestionarPacientes);

        BorrarPaciente.setMnemonic('B');
        BorrarPaciente.setText("Borrar Paciente");
        BorrarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarPacienteActionPerformed(evt);
            }
        });
        fileMenu.add(BorrarPaciente);

        PedirCita.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        PedirCita.setMnemonic('P');
        PedirCita.setText("Pedir Cita");
        PedirCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PedirCitaActionPerformed(evt);
            }
        });
        fileMenu.add(PedirCita);

        AñadirCita.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        AñadirCita.setMnemonic('A');
        AñadirCita.setText("Añadir Visita");
        AñadirCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirCitaActionPerformed(evt);
            }
        });
        fileMenu.add(AñadirCita);

        menuBar.add(fileMenu);

        ConsultarHistorial.setMnemonic('C');
        ConsultarHistorial.setText("Consultar Historial");

        MostrarHistorial.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        MostrarHistorial.setMnemonic('M');
        MostrarHistorial.setText("Mostrar Historial");
        MostrarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarHistorialActionPerformed(evt);
            }
        });
        ConsultarHistorial.add(MostrarHistorial);

        BorrarHistorial.setMnemonic('o');
        BorrarHistorial.setText("Borrar Historial");
        BorrarHistorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarHistorialActionPerformed(evt);
            }
        });
        ConsultarHistorial.add(BorrarHistorial);

        menuBar.add(ConsultarHistorial);

        Salir.setMnemonic('S');
        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        Exit.setMnemonic('l');
        Exit.setText("Salir");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        Salir.add(Exit);

        menuBar.add(Salir);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 279, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MostrarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarHistorialActionPerformed
        // TODO add your handling code here:
        this.pacientes=this.form.getPacientes();
        
        String dni;
        boolean error;
        do {
            error=false;
           if(pacientes.isEmpty()){
               JOptionPane.showMessageDialog(this, "No hay datos");
           }else{
            dni = JOptionPane.showInputDialog(this,"Escriba DNI que quiere mostrar el historial");
             if(dni==null){
                 JOptionPane.showMessageDialog(this, "Operacion cancelada");
             }else if(dni.isEmpty()){
                 JOptionPane.showMessageDialog(this, "Debes rellenar con algun dato");
                 error=true;
             }else if(pacientes.containsKey(dni)){
                 JOptionPane.showMessageDialog(this, pacientes.get(dni).detallePaciente());
             }else{
                 JOptionPane.showMessageDialog(this, "No existe dicho Paciente");
             }
           }
        } while (error);
        
        
    }//GEN-LAST:event_MostrarHistorialActionPerformed

    private void GestionarPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GestionarPacientesActionPerformed
        // TODO add your handling code here:
        form.setVisible(true);
    }//GEN-LAST:event_GestionarPacientesActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_SalirActionPerformed

    private void BorrarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarPacienteActionPerformed
        // TODO add your handling code here:
        pacientes = this.form.getPacientes();
        String dni;
        boolean error;
        do {
           error=false;
           dni = JOptionPane.showInputDialog(this,"Escriba DNI que quiere borrar");
            if(dni==null){
                JOptionPane.showMessageDialog(this, "Operacion cancelada");
            }else if(dni.isEmpty()){
                JOptionPane.showMessageDialog(this, "Debes rellenar con algun dato");
                error=true;
            }else if(pacientes.remove(dni)!=null){
                JOptionPane.showMessageDialog(this, "Paciente borrado con exito");
            }else{
                JOptionPane.showMessageDialog(this, "No existe dicho Paciente");
            }
        } while (error);
        
    }//GEN-LAST:event_BorrarPacienteActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitActionPerformed

    private void PedirCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PedirCitaActionPerformed
        // TODO add your handling code here:
        pacientes = this.form.getPacientes();
        String dni,cita;
        boolean error;
        do {
           error=false;
           dni = JOptionPane.showInputDialog(this,"Escriba DNI");
            if(dni==null){
                JOptionPane.showMessageDialog(this, "Operacion cancelada");
            }else if(dni.isEmpty()){
                JOptionPane.showMessageDialog(this, "Debes rellenar con algun dato");
                error=true;
                
            }else if(pacientes.containsKey(dni)){
                if(pacientes.get(dni).isCita()){
                    JOptionPane.showMessageDialog(this, "Ya ha pedido cita antes");
                }else{
                  cita=JOptionPane.showInputDialog(this,"Ponga fecha de la fecha en la que quieras pedir cita");
                    if(cita==null){
                        JOptionPane.showMessageDialog(this, "Operacion cancelada");
                    }else if(cita.isEmpty()){
                        JOptionPane.showMessageDialog(this, "Debes rellenar con algun dato");
                        error=true;
                    }else{
                        pacientes.get(dni).setCitaP(cita);
                        JOptionPane.showMessageDialog(this, "Fecha pedida para: "+cita);
                    }  
                }
            }else{
                JOptionPane.showMessageDialog(this, "No existe dicho Paciente");
            }
        } while (error);
        
    }//GEN-LAST:event_PedirCitaActionPerformed

    private void BorrarHistorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarHistorialActionPerformed
        // TODO add your handling code here:
        pacientes = this.form.getPacientes();
        String dni;
        boolean error;
        do {
           error=false;
           dni = JOptionPane.showInputDialog(this,"Escriba DNI que quiere borrar");
            if(dni==null){
                JOptionPane.showMessageDialog(this, "Operacion cancelada");
            }else if(dni.isEmpty()){
                JOptionPane.showMessageDialog(this, "Debes rellenar con algun dato");
                error=true;
            }else if(pacientes.containsKey(dni)){
                this.pacientes.get(dni).reiniciarHistorial();
                JOptionPane.showMessageDialog(this, "Historial borrado de: "+dni);
                
            }else{
                JOptionPane.showMessageDialog(this, "No existe dicho Paciente");
            }
        } while (error);
    }//GEN-LAST:event_BorrarHistorialActionPerformed

    private void AñadirCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirCitaActionPerformed
        // TODO add your handling code here:
        pacientes = this.form.getPacientes();
        String dni, nota;
        boolean error;
        do {
           error=false;
           dni = JOptionPane.showInputDialog(this,"Escribe DNI");
            if(dni==null){
                JOptionPane.showMessageDialog(this, "Operacion cancelada");
            }else if(dni.isEmpty()){
                JOptionPane.showMessageDialog(this, "Debes rellenar con algun dato");
                error=true;
            }else if(pacientes.containsKey(dni)){
                nota = JOptionPane.showInputDialog(this,"Escribe los apuntes de la visita");
                if(nota==null){
                    JOptionPane.showMessageDialog(this, "Operación cancelada");
                }else{
                    this.pacientes.get(dni).addVisita(nota);
                }
                
                JOptionPane.showMessageDialog(this, "Visita añadida a: "+dni);
                
            }else{
                JOptionPane.showMessageDialog(this, "No existe dicho Paciente");
            }
        } while (error);
        
    }//GEN-LAST:event_AñadirCitaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aplicacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AñadirCita;
    private javax.swing.JMenuItem BorrarHistorial;
    private javax.swing.JMenuItem BorrarPaciente;
    private javax.swing.JMenu ConsultarHistorial;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenuItem GestionarPacientes;
    private javax.swing.JMenuItem MostrarHistorial;
    private javax.swing.JMenuItem PedirCita;
    private javax.swing.JMenu Salir;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

}
